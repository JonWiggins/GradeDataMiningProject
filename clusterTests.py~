def jshat(clustering1, clustering2):
    similaratities = []

    if len(clustering1) > len(clustering2):
        for cluster1 in clustering1:
            max = 0
            for cluster2 in clustering2:
                js = jaccardSimilarity(cluster1, cluster2)
                if js > max:
                    max = js
            similaratities.append(max)
    else:
        for cluster1 in clustering2:
            max = 0
            for cluster2 in clustering1:
                js = jaccardSimilarity(cluster1, cluster2)
                if js > max:
                    max = js
            similaratities.append(max)

    if len(similaratities) == 0:
        return 0

    return sum(similaratities) / len(similaratities)
    # return similaratities


def purity(clustering1, clustering2):
    summation = 0

    # TODO investigate looping c1 vs c2
    for cluster in clustering1:
        highest = 0
        for comparer in clustering2:
            next = len(cluster.intersection(comparer))
            if next > highest:
                highest = next

        summation += highest

    # find total number of data points
    N = sum(len(cluster) for cluster in clustering1)

    if N == 0:
        return 0

    return summation / N


def fowlkesmallowsindex(clustering1, clustering2, instructors):
    # TP = the number of points that are present in the same cluster in both clusterings
    # FP = the number of points that are present in the same cluster in clustering1 but not clustering2
    # FN = the number of points that are present in the same cluster in clustering2 but not clustering1
    # TN = the number of points that are in different clusters in both clusterings
    TP = 0
    FP = 0
    FN = 0
    TN = 0

    for firstinstructor in instructors:
        firstinstructorclusterone = None
        for cluster in clustering1:
            if firstinstructor in cluster:
                firstinstructorclusterone = cluster

        firstinstructorclustertwo = None
        for cluster in clustering2:
            if firstinstructor in cluster:
                firstinstructorclustertwo = cluster

        for secondinstructor in instructors:
            secondinstructorclusterone = None
            for cluster in clustering1:
                if secondinstructor in cluster:
                    secondinstructorclusterone = cluster
            secondinstructorclustertwo = None
            for cluster in clustering2:
                if secondinstructor in cluster:
                    secondinstructorclustertwo = cluster

            if firstinstructorclusterone == secondinstructorclusterone \
                    and firstinstructorclustertwo == secondinstructorclustertwo:
                TP += 1
            elif firstinstructorclusterone == secondinstructorclusterone \
                    and not firstinstructorclustertwo == secondinstructorclustertwo:
                FP += 1
            elif not firstinstructorclusterone == secondinstructorclusterone \
                    and firstinstructorclustertwo == secondinstructorclustertwo:
                FN += 1
            elif not firstinstructorclusterone == secondinstructorclusterone \
                    and not firstinstructorclustertwo == secondinstructorclustertwo:
                TN += 1

    if TP + FP == 0 or TP + FN == 0:
        return 0

    fpterm = TP / (TP + FP)
    fnterm = TP / (TP + FN)

    FM = np.sqrt(fpterm * fnterm)

    return FM
